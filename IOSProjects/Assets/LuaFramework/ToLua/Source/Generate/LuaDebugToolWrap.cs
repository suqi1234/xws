//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaDebugToolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaDebugTool), typeof(System.Object));
		L.RegFunction("getCSharpValue", getCSharpValue);
		L.RegFunction("convertLuaValueInfos", convertLuaValueInfos);
		L.RegFunction("getUserDataInfo", getUserDataInfo);
		L.RegFunction("getInsType", getInsType);
		L.RegFunction("SearchDataInfo", SearchDataInfo);
		L.RegFunction("getListValues", getListValues);
		L.RegFunction("getDictionaryValues", getDictionaryValues);
		L.RegFunction("New", _CreateLuaDebugTool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaDebugTool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaDebugTool obj = new LuaDebugTool();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaDebugTool.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getCSharpValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			object arg0 = ToLua.ToVarObject(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			object o = LuaDebugTool.getCSharpValue(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int convertLuaValueInfos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.Dictionary<string,SearchValueInfo> arg0 = (System.Collections.Generic.Dictionary<string,SearchValueInfo>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.Dictionary<string,SearchValueInfo>));
			System.Collections.Generic.List<LuaValueInfo> o = LuaDebugTool.convertLuaValueInfos(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getUserDataInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			System.Collections.Generic.List<LuaValueInfo> o = LuaDebugTool.getUserDataInfo(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getInsType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 1);
			LuaIdeDebugInsTypeEnum o = LuaDebugTool.getInsType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SearchDataInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			System.Collections.Generic.Dictionary<string,SearchValueInfo> o = LuaDebugTool.SearchDataInfo(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getListValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			System.Collections.Generic.Dictionary<string,SearchValueInfo> o = LuaDebugTool.getListValues(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDictionaryValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			System.Collections.Generic.Dictionary<string,SearchValueInfo> o = LuaDebugTool.getDictionaryValues(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


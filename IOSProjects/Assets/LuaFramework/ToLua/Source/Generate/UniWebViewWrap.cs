//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UniWebViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UniWebView), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("UpdateFrame", UpdateFrame);
		L.RegFunction("CloseUniWebView", CloseUniWebView);
		L.RegFunction("Load", Load);
		L.RegFunction("LoadHTMLString", LoadHTMLString);
		L.RegFunction("Reload", Reload);
		L.RegFunction("Stop", Stop);
		L.RegFunction("GoBack", GoBack);
		L.RegFunction("GoForward", GoForward);
		L.RegFunction("SetOpenLinksInExternalBrowser", SetOpenLinksInExternalBrowser);
		L.RegFunction("Show", Show);
		L.RegFunction("Hide", Hide);
		L.RegFunction("AnimateTo", AnimateTo);
		L.RegFunction("AddJavaScript", AddJavaScript);
		L.RegFunction("EvaluateJavaScript", EvaluateJavaScript);
		L.RegFunction("AddUrlScheme", AddUrlScheme);
		L.RegFunction("RemoveUrlScheme", RemoveUrlScheme);
		L.RegFunction("AddSslExceptionDomain", AddSslExceptionDomain);
		L.RegFunction("RemoveSslExceptionDomain", RemoveSslExceptionDomain);
		L.RegFunction("SetHeaderField", SetHeaderField);
		L.RegFunction("SetUserAgent", SetUserAgent);
		L.RegFunction("GetUserAgent", GetUserAgent);
		L.RegFunction("SetContentInsetAdjustmentBehavior", SetContentInsetAdjustmentBehavior);
		L.RegFunction("SetAllowAutoPlay", SetAllowAutoPlay);
		L.RegFunction("SetAllowInlinePlay", SetAllowInlinePlay);
		L.RegFunction("SetJavaScriptEnabled", SetJavaScriptEnabled);
		L.RegFunction("SetAllowJavaScriptOpenWindow", SetAllowJavaScriptOpenWindow);
		L.RegFunction("CleanCache", CleanCache);
		L.RegFunction("ClearCookies", ClearCookies);
		L.RegFunction("SetCookie", SetCookie);
		L.RegFunction("GetCookie", GetCookie);
		L.RegFunction("ClearHttpAuthUsernamePassword", ClearHttpAuthUsernamePassword);
		L.RegFunction("SetShowSpinnerWhileLoading", SetShowSpinnerWhileLoading);
		L.RegFunction("SetSpinnerText", SetSpinnerText);
		L.RegFunction("SetHorizontalScrollBarEnabled", SetHorizontalScrollBarEnabled);
		L.RegFunction("SetVerticalScrollBarEnabled", SetVerticalScrollBarEnabled);
		L.RegFunction("SetBouncesEnabled", SetBouncesEnabled);
		L.RegFunction("SetZoomEnabled", SetZoomEnabled);
		L.RegFunction("AddPermissionTrustDomain", AddPermissionTrustDomain);
		L.RegFunction("RemovePermissionTrustDomain", RemovePermissionTrustDomain);
		L.RegFunction("SetBackButtonEnabled", SetBackButtonEnabled);
		L.RegFunction("SetUseWideViewPort", SetUseWideViewPort);
		L.RegFunction("SetLoadWithOverviewMode", SetLoadWithOverviewMode);
		L.RegFunction("SetImmersiveModeEnabled", SetImmersiveModeEnabled);
		L.RegFunction("SetShowToolbar", SetShowToolbar);
		L.RegFunction("SetToolbarDoneButtonText", SetToolbarDoneButtonText);
		L.RegFunction("SetShowToolbarNavigationButtons", SetShowToolbarNavigationButtons);
		L.RegFunction("SetWebContentsDebuggingEnabled", SetWebContentsDebuggingEnabled);
		L.RegFunction("SetWindowUserResizeEnabled", SetWindowUserResizeEnabled);
		L.RegFunction("GetHTMLContent", GetHTMLContent);
		L.RegFunction("SetAllowFileAccessFromFileURLs", SetAllowFileAccessFromFileURLs);
		L.RegFunction("SetAllowHTTPAuthPopUpWindow", SetAllowHTTPAuthPopUpWindow);
		L.RegFunction("SetCalloutEnabled", SetCalloutEnabled);
		L.RegFunction("SetSupportMultipleWindows", SetSupportMultipleWindows);
		L.RegFunction("SetDefaultFontSize", SetDefaultFontSize);
		L.RegFunction("SetDragInteractionEnabled", SetDragInteractionEnabled);
		L.RegFunction("Print", Print);
		L.RegFunction("ScrollTo", ScrollTo);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Frame", get_Frame, set_Frame);
		L.RegVar("ReferenceRectTransform", get_ReferenceRectTransform, set_ReferenceRectTransform);
		L.RegVar("Url", get_Url, null);
		L.RegVar("CanGoBack", get_CanGoBack, null);
		L.RegVar("CanGoForward", get_CanGoForward, null);
		L.RegVar("BackgroundColor", get_BackgroundColor, set_BackgroundColor);
		L.RegVar("Alpha", get_Alpha, set_Alpha);
		L.RegVar("OnPageStarted", get_OnPageStarted, set_OnPageStarted);
		L.RegVar("OnPageFinished", get_OnPageFinished, set_OnPageFinished);
		L.RegVar("OnPageErrorReceived", get_OnPageErrorReceived, set_OnPageErrorReceived);
		L.RegVar("OnMessageReceived", get_OnMessageReceived, set_OnMessageReceived);
		L.RegVar("OnShouldClose", get_OnShouldClose, set_OnShouldClose);
		L.RegVar("OnKeyCodeReceived", get_OnKeyCodeReceived, set_OnKeyCodeReceived);
		L.RegVar("OnOrientationChanged", get_OnOrientationChanged, set_OnOrientationChanged);
		L.RegVar("OnWebContentProcessTerminated", get_OnWebContentProcessTerminated, set_OnWebContentProcessTerminated);
		L.RegFunction("OnWebContentProcessTerminatedDelegate", UniWebView_OnWebContentProcessTerminatedDelegate);
		L.RegFunction("OrientationChangedDelegate", UniWebView_OrientationChangedDelegate);
		L.RegFunction("KeyCodeReceivedDelegate", UniWebView_KeyCodeReceivedDelegate);
		L.RegFunction("ShouldCloseDelegate", UniWebView_ShouldCloseDelegate);
		L.RegFunction("MessageReceivedDelegate", UniWebView_MessageReceivedDelegate);
		L.RegFunction("PageErrorReceivedDelegate", UniWebView_PageErrorReceivedDelegate);
		L.RegFunction("PageFinishedDelegate", UniWebView_PageFinishedDelegate);
		L.RegFunction("PageStartedDelegate", UniWebView_PageStartedDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateFrame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.UpdateFrame();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUniWebView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.CloseUniWebView();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.Load(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Load(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.Load(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.Load");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadHTMLString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.LoadHTMLString(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.LoadHTMLString(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.LoadHTMLString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.Reload();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.GoBack();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoForward(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.GoForward();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOpenLinksInExternalBrowser(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetOpenLinksInExternalBrowser(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Show(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool o = obj.Show();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool o = obj.Show(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)ToLua.CheckObject(L, 3, typeof(UniWebViewTransitionEdge));
				bool o = obj.Show(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)ToLua.CheckObject(L, 3, typeof(UniWebViewTransitionEdge));
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.Show(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)ToLua.CheckObject(L, 3, typeof(UniWebViewTransitionEdge));
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				bool o = obj.Show(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.Show");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hide(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool o = obj.Hide();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool o = obj.Hide(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)ToLua.CheckObject(L, 3, typeof(UniWebViewTransitionEdge));
				bool o = obj.Hide(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)ToLua.CheckObject(L, 3, typeof(UniWebViewTransitionEdge));
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.Hide(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UniWebViewTransitionEdge arg1 = (UniWebViewTransitionEdge)ToLua.CheckObject(L, 3, typeof(UniWebViewTransitionEdge));
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				bool o = obj.Hide(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.Hide");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AnimateTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool o = obj.AnimateTo(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.AnimateTo(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				bool o = obj.AnimateTo(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.AnimateTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddJavaScript(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.AddJavaScript(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<UniWebViewNativeResultPayload> arg1 = (System.Action<UniWebViewNativeResultPayload>)ToLua.CheckDelegate<System.Action<UniWebViewNativeResultPayload>>(L, 3);
				obj.AddJavaScript(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.AddJavaScript");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EvaluateJavaScript(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.EvaluateJavaScript(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<UniWebViewNativeResultPayload> arg1 = (System.Action<UniWebViewNativeResultPayload>)ToLua.CheckDelegate<System.Action<UniWebViewNativeResultPayload>>(L, 3);
				obj.EvaluateJavaScript(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.EvaluateJavaScript");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUrlScheme(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddUrlScheme(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveUrlScheme(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveUrlScheme(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSslExceptionDomain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddSslExceptionDomain(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSslExceptionDomain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveSslExceptionDomain(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeaderField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetHeaderField(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUserAgent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetUserAgent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUserAgent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string o = obj.GetUserAgent();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetContentInsetAdjustmentBehavior(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			UniWebViewContentInsetAdjustmentBehavior arg0 = (UniWebViewContentInsetAdjustmentBehavior)ToLua.CheckObject(L, 2, typeof(UniWebViewContentInsetAdjustmentBehavior));
			obj.SetContentInsetAdjustmentBehavior(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAllowAutoPlay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UniWebView.SetAllowAutoPlay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAllowInlinePlay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UniWebView.SetAllowInlinePlay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetJavaScriptEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UniWebView.SetJavaScriptEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAllowJavaScriptOpenWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UniWebView.SetAllowJavaScriptOpenWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.CleanCache();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCookies(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UniWebView.ClearCookies();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCookie(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UniWebView.SetCookie(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UniWebView.SetCookie(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.SetCookie");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCookie(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = UniWebView.GetCookie(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string o = UniWebView.GetCookie(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.GetCookie");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearHttpAuthUsernamePassword(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UniWebView.ClearHttpAuthUsernamePassword(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShowSpinnerWhileLoading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShowSpinnerWhileLoading(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpinnerText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetSpinnerText(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHorizontalScrollBarEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetHorizontalScrollBarEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVerticalScrollBarEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetVerticalScrollBarEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBouncesEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetBouncesEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetZoomEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetZoomEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPermissionTrustDomain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddPermissionTrustDomain(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemovePermissionTrustDomain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemovePermissionTrustDomain(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBackButtonEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetBackButtonEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUseWideViewPort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetUseWideViewPort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLoadWithOverviewMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetLoadWithOverviewMode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImmersiveModeEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetImmersiveModeEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShowToolbar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.SetShowToolbar(arg0);
				return 0;
			}
			else if (count == 3)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetShowToolbar(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetShowToolbar(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.SetShowToolbar(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UniWebView.SetShowToolbar");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetToolbarDoneButtonText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetToolbarDoneButtonText(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShowToolbarNavigationButtons(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShowToolbarNavigationButtons(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWebContentsDebuggingEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UniWebView.SetWebContentsDebuggingEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWindowUserResizeEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetWindowUserResizeEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHTMLContent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
			obj.GetHTMLContent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAllowFileAccessFromFileURLs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetAllowFileAccessFromFileURLs(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAllowHTTPAuthPopUpWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetAllowHTTPAuthPopUpWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCalloutEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetCalloutEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSupportMultipleWindows(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetSupportMultipleWindows(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDefaultFontSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetDefaultFontSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDragInteractionEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetDragInteractionEnabled(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Print(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			obj.Print();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScrollTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UniWebView obj = (UniWebView)ToLua.CheckObject<UniWebView>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.ScrollTo(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Frame(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UnityEngine.Rect ret = obj.Frame;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Frame on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReferenceRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UnityEngine.RectTransform ret = obj.ReferenceRectTransform;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReferenceRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			string ret = obj.Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanGoBack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.CanGoBack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanGoBack on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanGoForward(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			bool ret = obj.CanGoForward;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanGoForward on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BackgroundColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UnityEngine.Color ret = obj.BackgroundColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BackgroundColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Alpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			float ret = obj.Alpha;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Alpha on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPageStarted(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.PageStartedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPageFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.PageFinishedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnPageErrorReceived(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.PageErrorReceivedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnMessageReceived(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.MessageReceivedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnShouldClose(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.ShouldCloseDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnKeyCodeReceived(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.KeyCodeReceivedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnOrientationChanged(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.OrientationChangedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnWebContentProcessTerminated(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(UniWebView.OnWebContentProcessTerminatedDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Frame(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			obj.Frame = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Frame on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReferenceRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.ReferenceRectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReferenceRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BackgroundColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.BackgroundColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BackgroundColor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Alpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UniWebView obj = (UniWebView)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Alpha = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Alpha on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPageStarted(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnPageStarted' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.PageStartedDelegate ev = (UniWebView.PageStartedDelegate)arg0.func;
				obj.OnPageStarted += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.PageStartedDelegate ev = (UniWebView.PageStartedDelegate)arg0.func;
				obj.OnPageStarted -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPageFinished(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnPageFinished' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.PageFinishedDelegate ev = (UniWebView.PageFinishedDelegate)arg0.func;
				obj.OnPageFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.PageFinishedDelegate ev = (UniWebView.PageFinishedDelegate)arg0.func;
				obj.OnPageFinished -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnPageErrorReceived(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnPageErrorReceived' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.PageErrorReceivedDelegate ev = (UniWebView.PageErrorReceivedDelegate)arg0.func;
				obj.OnPageErrorReceived += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.PageErrorReceivedDelegate ev = (UniWebView.PageErrorReceivedDelegate)arg0.func;
				obj.OnPageErrorReceived -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnMessageReceived(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnMessageReceived' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.MessageReceivedDelegate ev = (UniWebView.MessageReceivedDelegate)arg0.func;
				obj.OnMessageReceived += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.MessageReceivedDelegate ev = (UniWebView.MessageReceivedDelegate)arg0.func;
				obj.OnMessageReceived -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnShouldClose(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnShouldClose' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.ShouldCloseDelegate ev = (UniWebView.ShouldCloseDelegate)arg0.func;
				obj.OnShouldClose += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.ShouldCloseDelegate ev = (UniWebView.ShouldCloseDelegate)arg0.func;
				obj.OnShouldClose -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnKeyCodeReceived(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnKeyCodeReceived' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.KeyCodeReceivedDelegate ev = (UniWebView.KeyCodeReceivedDelegate)arg0.func;
				obj.OnKeyCodeReceived += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.KeyCodeReceivedDelegate ev = (UniWebView.KeyCodeReceivedDelegate)arg0.func;
				obj.OnKeyCodeReceived -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnOrientationChanged(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnOrientationChanged' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.OrientationChangedDelegate ev = (UniWebView.OrientationChangedDelegate)arg0.func;
				obj.OnOrientationChanged += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.OrientationChangedDelegate ev = (UniWebView.OrientationChangedDelegate)arg0.func;
				obj.OnOrientationChanged -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnWebContentProcessTerminated(IntPtr L)
	{
		try
		{
			UniWebView obj = (UniWebView)ToLua.CheckObject(L, 1, typeof(UniWebView));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UniWebView.OnWebContentProcessTerminated' can only appear on the left hand side of += or -= when used outside of the type 'UniWebView'");
			}

			if (arg0.op == EventOp.Add)
			{
				UniWebView.OnWebContentProcessTerminatedDelegate ev = (UniWebView.OnWebContentProcessTerminatedDelegate)arg0.func;
				obj.OnWebContentProcessTerminated += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UniWebView.OnWebContentProcessTerminatedDelegate ev = (UniWebView.OnWebContentProcessTerminatedDelegate)arg0.func;
				obj.OnWebContentProcessTerminated -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_OnWebContentProcessTerminatedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.OnWebContentProcessTerminatedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.OnWebContentProcessTerminatedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_OrientationChangedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.OrientationChangedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.OrientationChangedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_KeyCodeReceivedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.KeyCodeReceivedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.KeyCodeReceivedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_ShouldCloseDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.ShouldCloseDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.ShouldCloseDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_MessageReceivedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.MessageReceivedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.MessageReceivedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_PageErrorReceivedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.PageErrorReceivedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.PageErrorReceivedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_PageFinishedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.PageFinishedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.PageFinishedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UniWebView_PageStartedDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UniWebView.PageStartedDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UniWebView.PageStartedDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


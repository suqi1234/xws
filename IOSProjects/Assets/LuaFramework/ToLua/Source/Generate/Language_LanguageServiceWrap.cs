//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Language_LanguageServiceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Language.LanguageService), typeof(System.Object));
		L.RegFunction("LoadContent", LoadContent);
		L.RegFunction("GetFromFile", GetFromFile);
		L.RegFunction("GetStrById", GetStrById);
		L.RegFunction("RemoveText", RemoveText);
		L.RegFunction("GetStringByKey", GetStringByKey);
		L.RegFunction("UpdateText", UpdateText);
		L.RegFunction("New", _CreateLanguage_LanguageService);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AllTextObjct", get_AllTextObjct, set_AllTextObjct);
		L.RegVar("Languages", get_Languages, set_Languages);
		L.RegVar("LanguageNames", get_LanguageNames, set_LanguageNames);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("Files", get_Files, set_Files);
		L.RegVar("StringsByFile", get_StringsByFile, set_StringsByFile);
		L.RegVar("Strings", get_Strings, set_Strings);
		L.RegVar("Language", get_Language, set_Language);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLanguage_LanguageService(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Language.LanguageService obj = new Language.LanguageService();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Language.LanguageService.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadContent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
			obj.LoadContent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFromFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string o = obj.GetFromFile(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				Language.LanguageText arg3 = (Language.LanguageText)ToLua.CheckObject<Language.LanguageText>(L, 5);
				string o = obj.GetFromFile(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Language.LanguageService.GetFromFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStrById(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetStrById(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
			Language.LanguageText arg0 = (Language.LanguageText)ToLua.CheckObject<Language.LanguageText>(L, 2);
			obj.RemoveText(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStringByKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string o = obj.GetStringByKey(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Language.LanguageService obj = (Language.LanguageService)ToLua.CheckObject<Language.LanguageService>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			string[] arg2 = ToLua.CheckParamsString(L, 4, count - 3);
			obj.UpdateText(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllTextObjct(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<Language.LanguageText> ret = obj.AllTextObjct;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllTextObjct on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Languages(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<Language.LanguageInfo> ret = obj.Languages;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Languages on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LanguageNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<string> ret = obj.LanguageNames;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LanguageNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Language.LanguageService.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Files(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<string> ret = obj.Files;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Files on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StringsByFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<string,string>> ret = obj.StringsByFile;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StringsByFile on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Strings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.Dictionary<string,string> ret = obj.Strings;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Strings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Language(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			Language.LanguageInfo ret = obj.Language;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Language on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AllTextObjct(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<Language.LanguageText> arg0 = (System.Collections.Generic.List<Language.LanguageText>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Language.LanguageText>));
			obj.AllTextObjct = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllTextObjct on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Languages(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<Language.LanguageInfo> arg0 = (System.Collections.Generic.List<Language.LanguageInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Language.LanguageInfo>));
			obj.Languages = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Languages on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LanguageNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.LanguageNames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LanguageNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Files(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.Files = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Files on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StringsByFile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<string,string>> arg0 = (System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<string,string>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,System.Collections.Generic.Dictionary<string,string>>));
			obj.StringsByFile = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StringsByFile on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Strings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			System.Collections.Generic.Dictionary<string,string> arg0 = (System.Collections.Generic.Dictionary<string,string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,string>));
			obj.Strings = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Strings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Language(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Language.LanguageService obj = (Language.LanguageService)o;
			Language.LanguageInfo arg0 = (Language.LanguageInfo)ToLua.CheckObject<Language.LanguageInfo>(L, 2);
			obj.Language = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Language on a nil value");
		}
	}
}

